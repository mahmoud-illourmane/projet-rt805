// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: SendData.proto

package SendData

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendDataClient is the client API for SendData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendDataClient interface {
	RpcSendData(ctx context.Context, in *SendDataRequest, opts ...grpc.CallOption) (*SendDataReply, error)
}

type sendDataClient struct {
	cc grpc.ClientConnInterface
}

func NewSendDataClient(cc grpc.ClientConnInterface) SendDataClient {
	return &sendDataClient{cc}
}

func (c *sendDataClient) RpcSendData(ctx context.Context, in *SendDataRequest, opts ...grpc.CallOption) (*SendDataReply, error) {
	out := new(SendDataReply)
	err := c.cc.Invoke(ctx, "/sendData.SendData/RpcSendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendDataServer is the server API for SendData service.
// All implementations must embed UnimplementedSendDataServer
// for forward compatibility
type SendDataServer interface {
	RpcSendData(context.Context, *SendDataRequest) (*SendDataReply, error)
	mustEmbedUnimplementedSendDataServer()
}

// UnimplementedSendDataServer must be embedded to have forward compatible implementations.
type UnimplementedSendDataServer struct {
}

func (UnimplementedSendDataServer) RpcSendData(context.Context, *SendDataRequest) (*SendDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcSendData not implemented")
}
func (UnimplementedSendDataServer) mustEmbedUnimplementedSendDataServer() {}

// UnsafeSendDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendDataServer will
// result in compilation errors.
type UnsafeSendDataServer interface {
	mustEmbedUnimplementedSendDataServer()
}

func RegisterSendDataServer(s grpc.ServiceRegistrar, srv SendDataServer) {
	s.RegisterService(&SendData_ServiceDesc, srv)
}

func _SendData_RpcSendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendDataServer).RpcSendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendData.SendData/RpcSendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendDataServer).RpcSendData(ctx, req.(*SendDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SendData_ServiceDesc is the grpc.ServiceDesc for SendData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sendData.SendData",
	HandlerType: (*SendDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcSendData",
			Handler:    _SendData_RpcSendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SendData.proto",
}
